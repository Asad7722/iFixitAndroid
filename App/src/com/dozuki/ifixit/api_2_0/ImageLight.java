// Code generated by Wire protocol buffer compiler, do not edit.
package com.dozuki.ifixit.api_2_0;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class ImageLight extends Message {

  public static final Integer DEFAULT_ID = 0;
  public static final String DEFAULT_ORIGINAL = "";
  public static final String DEFAULT_MINI = "";
  public static final String DEFAULT_THUMBNAIL = "";
  public static final String DEFAULT_STANDARD = "";
  public static final String DEFAULT_MEDIUM = "";
  public static final String DEFAULT_LARGE = "";
  public static final String DEFAULT_HUGE = "";

  @ProtoField(tag = 1, type = INT32, label = REQUIRED)
  public final Integer id;

  @ProtoField(tag = 2, type = STRING, label = REQUIRED)
  public final String original;

  @ProtoField(tag = 3, type = STRING)
  public final String mini;

  @ProtoField(tag = 4, type = STRING)
  public final String thumbnail;

  @ProtoField(tag = 5, type = STRING)
  public final String standard;

  @ProtoField(tag = 6, type = STRING)
  public final String medium;

  @ProtoField(tag = 7, type = STRING)
  public final String large;

  @ProtoField(tag = 8, type = STRING)
  public final String huge;

  private ImageLight(Builder builder) {
    super(builder);
    this.id = builder.id;
    this.original = builder.original;
    this.mini = builder.mini;
    this.thumbnail = builder.thumbnail;
    this.standard = builder.standard;
    this.medium = builder.medium;
    this.large = builder.large;
    this.huge = builder.huge;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ImageLight)) return false;
    ImageLight o = (ImageLight) other;
    return equals(id, o.id)
        && equals(original, o.original)
        && equals(mini, o.mini)
        && equals(thumbnail, o.thumbnail)
        && equals(standard, o.standard)
        && equals(medium, o.medium)
        && equals(large, o.large)
        && equals(huge, o.huge);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = id != null ? id.hashCode() : 0;
      result = result * 37 + (original != null ? original.hashCode() : 0);
      result = result * 37 + (mini != null ? mini.hashCode() : 0);
      result = result * 37 + (thumbnail != null ? thumbnail.hashCode() : 0);
      result = result * 37 + (standard != null ? standard.hashCode() : 0);
      result = result * 37 + (medium != null ? medium.hashCode() : 0);
      result = result * 37 + (large != null ? large.hashCode() : 0);
      result = result * 37 + (huge != null ? huge.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ImageLight> {

    public Integer id;
    public String original;
    public String mini;
    public String thumbnail;
    public String standard;
    public String medium;
    public String large;
    public String huge;

    public Builder() {
    }

    public Builder(ImageLight message) {
      super(message);
      if (message == null) return;
      this.id = message.id;
      this.original = message.original;
      this.mini = message.mini;
      this.thumbnail = message.thumbnail;
      this.standard = message.standard;
      this.medium = message.medium;
      this.large = message.large;
      this.huge = message.huge;
    }

    public Builder id(Integer id) {
      this.id = id;
      return this;
    }

    public Builder original(String original) {
      this.original = original;
      return this;
    }

    public Builder mini(String mini) {
      this.mini = mini;
      return this;
    }

    public Builder thumbnail(String thumbnail) {
      this.thumbnail = thumbnail;
      return this;
    }

    public Builder standard(String standard) {
      this.standard = standard;
      return this;
    }

    public Builder medium(String medium) {
      this.medium = medium;
      return this;
    }

    public Builder large(String large) {
      this.large = large;
      return this;
    }

    public Builder huge(String huge) {
      this.huge = huge;
      return this;
    }

    @Override
    public ImageLight build() {
      checkRequiredFields();
      return new ImageLight(this);
    }
  }
}
